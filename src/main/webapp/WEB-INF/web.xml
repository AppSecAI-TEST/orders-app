<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	version="3.0">

	<display-name>orders-app</display-name>

	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>

	<servlet>
		<!--Servlets definition -->
		<!-- Declare a Spring MVC DispatcherServlet as usual -->
		<servlet-name>mvc-dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param> <!-- Initializing parameter for the app context - only for this servlet -->
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/dispatcher-servlet.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<!-- Servlet mapping order - in this case just one "mvc-dispatcher" -->
	<!-- map all requests for defined url-patterns to the dispatcher servlet -->
	<servlet-mapping>
		<servlet-name>mvc-dispatcher</servlet-name>
		<url-pattern>/</url-pattern>
		<url-pattern>*.html</url-pattern>
		<url-pattern>*.htm</url-pattern>
		<url-pattern>*.json</url-pattern>
		<url-pattern>*.xml</url-pattern>
	</servlet-mapping>

	<!-- Bootstrap the root application context as usual using ContextLoaderListener -->


	<!-- needed for ContextLoaderListener -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/applicationContext.xml</param-value>
	</context-param>
	<listener>
	<!-- Bootstraps the root web application context before servlet initialization -->
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>



	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- To get rid of LazyInitialization exception caused by invoking propoerties 
		as list objects from DB -->
	<!-- <filter> <filter-name>oemInViewFilter</filter-name> <filter-class>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</filter-class> 
		<init-param> <param-name>EntityManagerFactoryBeanName</param-name> <param-value>entityManagerFactory</param-value> 
		</init-param> </filter> <filter-mapping> <filter-name>oemInViewFilter</filter-name> 
		<url-pattern>/*</url-pattern> </filter-mapping> -->
</web-app>